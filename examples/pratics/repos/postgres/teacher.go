//+mro-ignore
// DO NOT EDIT THIS FILE
// Generated by mro at 2021-07-21 10:39:37
package postgres

import (
	dbutil274 "github.com/seerx/gpa/rt/dbutil"
	models "github.com/seerx/gpa/examples/pratics/models"
	rt318 "github.com/seerx/gpa/rt"
	sql728 "database/sql"
)

type Teacher struct {
	p *rt318.Provider
}

func (teacher *Teacher) InsertTeacher(name string) (*models.Teacher, error) {
	var2 := &models.Teacher{}
	var2.Name = name
	var err error
	var var3 sql728.Result
	var1 := "INSERT INTO teacher (name) VALUES (?) RETURNING id"
	var3, err = teacher.p.Executor().Exec(var1, name)
	if err != nil {
		return nil, err
	}
	
	var3InsertID, err := var3.LastInsertId()
	if err != nil {
		return nil, err
	}
	var2.ID = int(var3InsertID)
	
	return var2, err 
}

func (teacher *Teacher) Insert1Teacher(tc *models.Teacher) (*models.Teacher, error) {
	var err error
	var var3tp *dbutil274.TimeProp
	var3tp, err = dbutil274.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return nil, err
	}
	var3 := dbutil274.FormatColumnTime(teacher.p.GetTimeStampzFormat(),
		teacher.p.GetTimezone(),
		var3tp,
		tc.BirthDay)
	var var4 []byte
	var4, err = tc.Addr.Write()
	if err != nil {
		return nil, err
	}
	
	var var2 sql728.Result
	var1 := "INSERT INTO teacher (id,name,birth_day,address,addr) VALUES (?,?,?,?,?) RETURNING id"
	var2, err = teacher.p.Executor().Exec(var1, tc.ID, tc.Name, var3, tc.Address, var4)
	if err != nil {
		return nil, err
	}
	
	var2InsertID, err := var2.LastInsertId()
	if err != nil {
		return nil, err
	}
	tc.ID = int(var2InsertID)
	
	return tc, err 
}

func (teacher *Teacher) UpdateByID(tc *models.Teacher) error {
	var err error
	
	var var2tp *dbutil274.TimeProp
	var2tp, err = dbutil274.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return err
	}
	var2 := dbutil274.FormatColumnTime(teacher.p.GetTimeStampzFormat(),
		teacher.p.GetTimezone(),
		var2tp,
		tc.BirthDay)
	var var3 []byte
	var3, err = tc.Addr.Write()
	if err != nil {
		return err
	}
	
	var1 := "UPDATE teacher SET name=?,birth_day=?,address=?,addr=? WHERE id=? "
	var1Params := []interface{}{tc.Name, var2, tc.Address, var3}
	// where 参数
	var1Params = append(var1Params, tc.ID)
	
	_, err = teacher.p.Executor().Exec(var1, var1Params...)
	if err != nil {
		return err
	}
	
	return nil
}

func (teacher *Teacher) FindByID(id int64) (*models.Teacher, error){
    var err error
	var1 := "SELECT id,name,birth_day,address,addr FROM teacher WHERE id=? "
	var var1Params []interface{}
	// where 参数
	var1Params = append(var1Params, id)
    
    var3 := teacher.p.Executor().QueryRow(var1, var1Params...)
    var2 := &models.Teacher{}
    var var4 dbutil274.NullTime
    
    var var5 []byte
    if err = var3.Scan(&var2.ID, &var2.Name, &var4, &var2.Address, &var5); err != nil {
        return nil, err
    }
    
    var2.BirthDay = var4.Time()
    if err = var2.Addr.Read(var5); err != nil {
        return nil, err
    }
    
	return var2, nil
}

func (teacher *Teacher) FindAll() ([]*models.Teacher, error){
    var err error
	var1 := "SELECT id,name,birth_day,address,addr FROM teacher"
	var var1Params []interface{}
	// where 参数
    
    var var3 *sql728.Rows
	var3, err = teacher.p.Executor().QueryRows(var1, var1Params...)
	if err != nil {
		return nil,  err
	}
	
	var3Results := []*models.Teacher{}
	for var3.Next() {
		
        var2 := new(models.Teacher)
        var var4 dbutil274.NullTime
        
        var var5 []byte
        if err = var3.Scan(&var2.ID, &var2.Name, &var4, &var2.Address, &var5); err != nil {
            return nil,  err
        }
        
        var2.BirthDay = var4.Time()
        if err = var2.Addr.Read(var5); err != nil {
            return nil,  err
        }
        
		var3Results = append(var3Results, var2)
	}
	return var3Results, nil
}

func (teacher *Teacher) FindMap(kg func(*models.Teacher) (int64, error)) (map[int64]*models.Teacher, error){
    var err error
	var1 := "SELECT id,name,birth_day,address,addr FROM teacher"
	var var1Params []interface{}
	// where 参数
    
    var var3 *sql728.Rows
	var3, err = teacher.p.Executor().QueryRows(var1, var1Params...)
	if err != nil {
		return nil,  err
	}
	
	var3Results := map[int64]*models.Teacher{}
	for var3.Next() {
		var var2Key int64
        var2 := new(models.Teacher)
        var var4 dbutil274.NullTime
        
        var var5 []byte
        if err = var3.Scan(&var2.ID, &var2.Name, &var4, &var2.Address, &var5); err != nil {
            return nil,  err
        }
        
        var2.BirthDay = var4.Time()
        if err = var2.Addr.Read(var5); err != nil {
            return nil,  err
        }
        
		if var2Key, err = kg(var2); err != nil {
			return nil, err
		}
		var3Results[var2Key] = var2
	}
	return var3Results, nil
}

func (teacher *Teacher) FindCallbck(cb func(*models.Teacher) (error)) error{
    var err error
	var1 := "SELECT id,name,birth_day,address,addr FROM teacher"
	var var1Params []interface{}
	// where 参数
    
    var var3 *sql728.Rows
	var3, err = teacher.p.Executor().QueryRows(var1, var1Params...)
	if err != nil {
		return  err
	}
	
	var2 := &models.Teacher{}
	for var3.Next() {
        var var4 dbutil274.NullTime
        
        var var5 []byte
        if err = var3.Scan(&var2.ID, &var2.Name, &var4, &var2.Address, &var5); err != nil {
            return  err
        }
        
        var2.BirthDay = var4.Time()
        if err = var2.Addr.Read(var5); err != nil {
            return  err
        }
        
		if err = cb(var2); err != nil {
			return err
		}
	}
	return nil
}
