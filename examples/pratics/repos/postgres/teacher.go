//+mro-ignore
// DO NOT EDIT THIS FILE
// Generated by mro at 2021-07-20 16:36:13
package postgres

import (
	dbutil274 "github.com/seerx/gpa/rt/dbutil"
	models "github.com/seerx/gpa/examples/pratics/models"
	rt318 "github.com/seerx/gpa/rt"
	sql728 "database/sql"
)

type Teacher struct {
	p *rt318.Provider
}

func (teacher *Teacher) InsertTeacher(name string) (*models.Teacher, error) {
	var1 := &models.Teacher{}
	var1.Name = name
	var err error
	var var2 sql728.Result
	sql := "INSERT INTO teacher (name) VALUES (?) RETURNING id"
	var2, err = teacher.p.Executor().Exec(sql, name)
	if err != nil {
		return nil, err
	}
	
	var2InsertID, err := var2.LastInsertId()
	if err != nil {
		return nil, err
	}
	var1.ID = int(var2InsertID)
	
	return var1, err 
}

func (teacher *Teacher) Insert1Teacher(tc *models.Teacher) (*models.Teacher, error) {
	var err error
	var var2tp *dbutil274.TimeProp
	var2tp, err = dbutil274.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return nil, err
	}
	var2 := dbutil274.FormatColumnTime(teacher.p.GetTimeStampzFormat(),
		teacher.p.GetTimezone(),
		var2tp,
		tc.BirthDay)
	var var3 []byte
	var3, err = tc.Addr.Write()
	if err != nil {
		return nil, err
	}
	
	var var1 sql728.Result
	sql := "INSERT INTO teacher (id,name,birth_day,address,addr) VALUES (?,?,?,?,?) RETURNING id"
	var1, err = teacher.p.Executor().Exec(sql, tc.ID, tc.Name, var2, tc.Address, var3)
	if err != nil {
		return nil, err
	}
	
	var1InsertID, err := var1.LastInsertId()
	if err != nil {
		return nil, err
	}
	tc.ID = int(var1InsertID)
	
	return tc, err 
}

func (teacher *Teacher) UpdateByID(tc *models.Teacher) error {
	var err error
	
	var var1tp *dbutil274.TimeProp
	var1tp, err = dbutil274.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return err
	}
	var1 := dbutil274.FormatColumnTime(teacher.p.GetTimeStampzFormat(),
		teacher.p.GetTimezone(),
		var1tp,
		tc.BirthDay)
	var var2 []byte
	var2, err = tc.Addr.Write()
	if err != nil {
		return err
	}
	
	sql := "UPDATE teacher SET name=?,birth_day=?,address=?,addr=? WHERE id=? "
	sqlParams := []interface{}{tc.Name, var1, tc.Address, var2}
	// where 参数
	sqlParams = append(sqlParams, tc.ID)
	
	_, err = teacher.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return err
	}
	
	return nil
}

func (teacher *Teacher) FindByID(id int64) (*models.Teacher, error){
    var err error
	sql := "SELECT id,name,birth_day,address,addr FROM teacher WHERE id=? "
	var sqlParams []interface{}
	// where 参数
	sqlParams = append(sqlParams, id)
    
    var2 := teacher.p.Executor().QueryRow(sql, sqlParams...)
    var1 := &models.Teacher{}
    var var3 dbutil274.NullTime
    var1.Addr = &models.Addr{}
    var var4 []byte
    if err = var2.Scan(&var1.ID, &var1.Name, &var3, &var1.Address, &var4); err != nil {
        return nil, err
    }
    
    var1.BirthDay = var3.Time()
    if err = var1.Addr.Read(var4); err != nil {
        return nil, err
    }
    
	return var1, nil
}

func (teacher *Teacher) FindAll() ([]*models.Teacher, error){
    var err error
	sql := "SELECT id,name,birth_day,address,addr FROM teacher"
	var sqlParams []interface{}
	// where 参数
    
    var var2 *sql728.Rows
	var2, err = teacher.p.Executor().QueryRows(sql, sqlParams...)
	if err != nil {
		return nil,  err
	}
	
	var2Results := []*models.Teacher{}
	for var2.Next() {
        var1 := &models.Teacher{}
        var var3 dbutil274.NullTime
        var1.Addr = &models.Addr{}
        var var4 []byte
        if err = var2.Scan(&var1.ID, &var1.Name, &var3, &var1.Address, &var4); err != nil {
            return nil,  err
        }
        
        var1.BirthDay = var3.Time()
        if err = var1.Addr.Read(var4); err != nil {
            return nil,  err
        }
        
		var2Results = append(var2Results, var1)
	}
	return var2Results, nil
}

func (teacher *Teacher) FindMap(kg func(*models.Teacher) int64) (map[int64]*models.Teacher, error){
    var err error
	sql := "SELECT id,name,birth_day,address,addr FROM teacher"
	var sqlParams []interface{}
	// where 参数
    
    var var2 *sql728.Rows
	var2, err = teacher.p.Executor().QueryRows(sql, sqlParams...)
	if err != nil {
		return nil,  err
	}
	
	var2Results := map[int64]*models.Teacher{}
	for var2.Next() {
        var1 := &models.Teacher{}
        var var3 dbutil274.NullTime
        var1.Addr = &models.Addr{}
        var var4 []byte
        if err = var2.Scan(&var1.ID, &var1.Name, &var3, &var1.Address, &var4); err != nil {
            return nil,  err
        }
        
        var1.BirthDay = var3.Time()
        if err = var1.Addr.Read(var4); err != nil {
            return nil,  err
        }
        
		var2Results[kg(var1)] = var1
	}
	return var2Results, nil
}

func (teacher *Teacher) FindCallbck(cb func(*models.Teacher) error) error{
    var err error
	sql := "SELECT id,name,birth_day,address,addr FROM teacher"
	var sqlParams []interface{}
	// where 参数
    
    var var2 *sql728.Rows
	var2, err = teacher.p.Executor().QueryRows(sql, sqlParams...)
	if err != nil {
		return  err
	}
	
	var1 := &models.Teacher{}
	for var2.Next() {
        var var3 dbutil274.NullTime
        var1.Addr = &models.Addr{}
        var var4 []byte
        if err = var2.Scan(&var1.ID, &var1.Name, &var3, &var1.Address, &var4); err != nil {
            return  err
        }
        
        var1.BirthDay = var3.Time()
        if err = var1.Addr.Read(var4); err != nil {
            return  err
        }
        
		if err = cb(var1); err != nil {
			return err
		}
	}
	return nil
}
