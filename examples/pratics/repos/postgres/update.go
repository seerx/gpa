//+mro-ignore
// DO NOT EDIT THIS FILE
// Generated by mro at 2021-07-16 17:38:36
package postgres

import (
	dbutil89 "github.com/seerx/gpa/rt/dbutil"
	models "github.com/seerx/gpa/examples/pratics/models"
	rt318 "github.com/seerx/gpa/rt"
	sql728 "database/sql"
)

type Update struct {
	p *rt318.Provider
}

func (update *Update) UpdateXuByIdAndAge(user *models.User) error {
	var err error
	
	var var1tp *dbutil89.TimeProp
	var1tp, err = dbutil89.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return err
	}
	var1 := dbutil89.FormatColumnTime(update.p.GetTimeStampzFormat(),
		update.p.GetTimezone(),
		var1tp,
		user.Cret)
	sql := "UPDATE user SET name=?,gender=?,oka_us_url=?,cret=?,url=? WHERE id=? And age=? "
	sqlParams := []interface{}{user.Name, user.Gender, user.OkaUsURL, var1, user.URL}
	// where 参数
	sqlParams = append(sqlParams, user.ID)
	sqlParams = append(sqlParams, user.Age)
	
	_, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return err
	}
	
	return nil
}

func (update *Update) UpdateByName(user *models.User, gender bool) (int64, error) {
	user.Gender = gender
	var err error
	
	var var3tp *dbutil89.TimeProp
	var3tp, err = dbutil89.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return 0, err
	}
	var3 := dbutil89.FormatColumnTime(update.p.GetTimeStampzFormat(),
		update.p.GetTimezone(),
		var3tp,
		user.Cret)
	sql := "UPDATE user SET age=?,gender=?,oka_us_url=?,cret=?,url=? WHERE name=? "
	sqlParams := []interface{}{user.Age, user.Gender, user.OkaUsURL, var3, user.URL}
	// where 参数
	sqlParams = append(sqlParams, user.Name)
	var var1 sql728.Result
	var1, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, err
	}
	return var2, nil
}

func (update *Update) UpdateByAgeAndCret(user *models.User) (int64, *models.User, error) {
	var err error
	
	var var3tp *dbutil89.TimeProp
	var3tp, err = dbutil89.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return 0, nil, err
	}
	var3 := dbutil89.FormatColumnTime(update.p.GetTimeStampzFormat(),
		update.p.GetTimezone(),
		var3tp,
		user.Cret)
	sql := "UPDATE user SET name=?,gender=?,oka_us_url=?,url=? WHERE age=? And cret=? "
	sqlParams := []interface{}{user.Name, user.Gender, user.OkaUsURL, user.URL}
	// where 参数
	sqlParams = append(sqlParams, user.Age)
	sqlParams = append(sqlParams, var3)
	var var1 sql728.Result
	var1, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, nil, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, nil, err
	}
	return var2, user, nil
}

func (update *Update) UpdateXByAge(age int, URL string) (int64, models.User, error) {
	var3 := &models.User{}
	var3.Age = age
	var3.URL = URL
	var err error
	sql := "UPDATE user SET url=? WHERE age=? "
	sqlParams := []interface{}{URL}
	// where 参数
	sqlParams = append(sqlParams, age)
	var var1 sql728.Result
	var1, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, models.User{}, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, models.User{}, err
	}
	return var2, *var3, nil
}

func (update *Update) UpdateName(user *models.User, name string) (int64, error) {
	user.Name = name
	var err error
	
	var var3tp *dbutil89.TimeProp
	var3tp, err = dbutil89.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return 0, err
	}
	var3 := dbutil89.FormatColumnTime(update.p.GetTimeStampzFormat(),
		update.p.GetTimezone(),
		var3tp,
		user.Cret)
	sql := "UPDATE \"user\" SET \"name\"=?,url=?,cret=? WHERE id=? and age>?"
	sqlParams := []interface{}{name, user.URL, var3}
	// where 参数
	sqlParams = append(sqlParams, user.ID)
	sqlParams = append(sqlParams, user.Age)
	var var1 sql728.Result
	var1, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, err
	}
	return var2, nil
}

func (update *Update) UpdateXName(user *models.User, name string) (int64, error) {
	user.Name = name
	var err error
	
	var var3tp *dbutil89.TimeProp
	var3tp, err = dbutil89.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return 0, err
	}
	var3 := dbutil89.FormatColumnTime(update.p.GetTimeStampzFormat(),
		update.p.GetTimezone(),
		var3tp,
		user.Cret)
	sql := "UPDATE user SET name=?,age=?,gender=?,oka_us_url=?,cret=?,url=? WHERE id=? and age>?"
	sqlParams := []interface{}{user.Name, user.Age, user.Gender, user.OkaUsURL, var3, user.URL}
	// where 参数
	sqlParams = append(sqlParams, user.ID)
	sqlParams = append(sqlParams, user.Age)
	var var1 sql728.Result
	var1, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, err
	}
	return var2, nil
}

func (update *Update) UpdateYName(name string) (int64, models.User, error) {
	var3 := &models.User{}
	var3.Name = name
	var err error
	sql := "UPDATE user SET name=?"
	sqlParams := []interface{}{name}
	// where 参数
	var var1 sql728.Result
	var1, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, models.User{}, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, models.User{}, err
	}
	return var2, *var3, nil
}

func (update *Update) Update1Name(name string, id uint64) (int64, models.User, error) {
	var3 := &models.User{}
	var3.Name = name
	var err error
	sql := "UPDATE user SET name=? WHERE id=?"
	sqlParams := []interface{}{name}
	// where 参数
	sqlParams = append(sqlParams, id)
	var var1 sql728.Result
	var1, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, models.User{}, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, models.User{}, err
	}
	return var2, *var3, nil
}

func (update *Update) Update2Name(user models.User, ids []uint64) (int64, error) {
	var err error
	
	var var3tp *dbutil89.TimeProp
	var3tp, err = dbutil89.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return 0, err
	}
	var3 := dbutil89.FormatColumnTime(update.p.GetTimeStampzFormat(),
		update.p.GetTimezone(),
		var3tp,
		user.Cret)
	sql := "UPDATE user SET name=?,age=?,gender=?,oka_us_url=?,cret=?,url=? WHERE name=? or id in (@in-1626428316)"
	sqlParams := []interface{}{user.Name, user.Age, user.Gender, user.OkaUsURL, var3, user.URL}
	// where 参数
	sqlParams = append(sqlParams, user.Name)
	if len(ids) <= 0 {
		return 0, dbutil89.NewErrParamIsEmpty("ids")
	}
	sql = dbutil89.TakePlaceHolder(sql, "@in-1626428316", len(ids))
	for _, varP := range ids {
		sqlParams = append(sqlParams, varP)
	}
	var var1 sql728.Result
	var1, err = update.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, err
	}
	return var2, nil
}
