//+gpa-ignore
// DO NOT EDIT THIS FILE
// Generated by gpa at 2021-07-19 16:50:01
package postgres

import (
	"github.com/seerx/gpa/rt"
	repos "github.com/seerx/gpa/examples/pratics/repos"
)

type repository struct {
	p *rt.Provider
	
	count *Count
	delete *Delete
	find *Find
	findBy *FindBy
	userRepo *UserRepo
	teacher *Teacher
	update *Update
}

func maker(p *rt.Provider) *repository {
	return &repository{p: p}
}

func init() {
	repos.Register("postgres", maker)
}


func (r *repository) Count() *Count {
	if r.count == nil {
		r.count = &Count{p: r.p}
	}
	return r.count
}

func (r *repository) Delete() *Delete {
	if r.delete == nil {
		r.delete = &Delete{p: r.p}
	}
	return r.delete
}

func (r *repository) Find() *Find {
	if r.find == nil {
		r.find = &Find{p: r.p}
	}
	return r.find
}

func (r *repository) FindBy() *FindBy {
	if r.findBy == nil {
		r.findBy = &FindBy{p: r.p}
	}
	return r.findBy
}

func (r *repository) UserRepo() *UserRepo {
	if r.userRepo == nil {
		r.userRepo = &UserRepo{p: r.p}
	}
	return r.userRepo
}

func (r *repository) Teacher() *Teacher {
	if r.teacher == nil {
		r.teacher = &Teacher{p: r.p}
	}
	return r.teacher
}

func (r *repository) Update() *Update {
	if r.update == nil {
		r.update = &Update{p: r.p}
	}
	return r.update
}
