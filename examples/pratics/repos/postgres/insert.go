//+mro-ignore
// DO NOT EDIT THIS FILE
// Generated by mro at 2021-07-16 16:48:20
package postgres

import (
	context "context"
	dbutil425 "github.com/seerx/gpa/rt/dbutil"
	models "github.com/seerx/gpa/examples/pratics/models"
	rt847 "github.com/seerx/gpa/rt"
)

type UserRepo struct {
	p *rt847.Provider
}

func (userRepo *UserRepo) Insert(ctx context.Context, user *models.User, name string) (*models.User, error) {
	user.Name = name
	var err error
	
	var var1tp *dbutil425.TimeProp
	var1tp, err = dbutil425.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return nil, err
	}
	var1 := dbutil425.FormatColumnTime(userRepo.p.GetTimeStampzFormat(),
		userRepo.p.GetTimezone(),
		var1tp,
		user.Cret)
	sql := "INSERT INTO user (id,name,age,gender,oka_us_url,cret,url) VALUES (?,?,?,?,?,?,?)"
	_, err = userRepo.p.Executor().ExecContext(ctx, sql, user.ID, user.Name, user.Age, user.Gender, user.OkaUsURL, var1, user.URL)
	if err != nil {
		return nil, err
	}
	return user, nil
}

func (userRepo *UserRepo) InsertA(user *models.User) error {
	var err error
	
	var var1tp *dbutil425.TimeProp
	var1tp, err = dbutil425.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return err
	}
	var1 := dbutil425.FormatColumnTime(userRepo.p.GetTimeStampzFormat(),
		userRepo.p.GetTimezone(),
		var1tp,
		user.Cret)
	sql := "INSERT INTO user (id,name,age,gender,oka_us_url,cret,url) VALUES (?,?,?,?,?,?,?)"
	_, err = userRepo.p.Executor().Exec(sql, user.ID, user.Name, user.Age, user.Gender, user.OkaUsURL, var1, user.URL)
	if err != nil {
		return err
	}
	return nil
}

func (userRepo *UserRepo) InsertB(user *models.User, DD string, URL string) (models.User, error) {
	user.URL = URL
	var err error
	
	var var1tp *dbutil425.TimeProp
	var1tp, err = dbutil425.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return models.User{}, err
	}
	var1 := dbutil425.FormatColumnTime(userRepo.p.GetTimeStampzFormat(),
		userRepo.p.GetTimezone(),
		var1tp,
		user.Cret)
	sql := "INSERT INTO user (id,name,age,gender,oka_us_url,cret,url) VALUES (?,?,?,?,?,?,?)"
	_, err = userRepo.p.Executor().Exec(sql, user.ID, user.Name, user.Age, user.Gender, user.OkaUsURL, var1, user.URL)
	if err != nil {
		return models.User{}, err
	}
	return *user, nil
}

func (userRepo *UserRepo) InsertC(user *models.User) (*models.User, error) {
	var err error
	
	var var1tp *dbutil425.TimeProp
	var1tp, err = dbutil425.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return nil, err
	}
	var1 := dbutil425.FormatColumnTime(userRepo.p.GetTimeStampzFormat(),
		userRepo.p.GetTimezone(),
		var1tp,
		user.Cret)
	sql := "INSERT INTO user (id,name,age,gender,oka_us_url,cret,url) VALUES (?,?,?,?,?,?,?)"
	_, err = userRepo.p.Executor().Exec(sql, user.ID, user.Name, user.Age, user.Gender, user.OkaUsURL, var1, user.URL)
	if err != nil {
		return nil, err
	}
	return user, nil
}

func (userRepo *UserRepo) InsertUser(name string) (*models.User, error) {
	var1 := &models.User{}
	var1.Name = name
	var err error
	sql := "INSERT INTO user (name) VALUES (?)"
	_, err = userRepo.p.Executor().Exec(sql, name)
	if err != nil {
		return nil, err
	}
	return var1, nil
}
