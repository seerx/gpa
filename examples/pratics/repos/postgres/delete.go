//+mro-ignore
// DO NOT EDIT THIS FILE
// Generated by mro at 2021-07-16 17:38:29
package postgres

import (
	dbutil540 "github.com/seerx/gpa/rt/dbutil"
	models "github.com/seerx/gpa/examples/pratics/models"
	rt887 "github.com/seerx/gpa/rt"
	sql425 "database/sql"
)

type Delete struct {
	p *rt887.Provider
}

func (delete *Delete) DeleteByName(user *models.User, gender bool) (int64, error) {
	var err error
	sql := "DELETE FROM user WHERE name=? "
	var sqlParams []interface{}
	// where 参数
	sqlParams = append(sqlParams, user.Name)
	var var1 sql425.Result
	var1, err = delete.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, err
	}
	return var2, nil
}

func (delete *Delete) DeleteByAgeAndCret(user *models.User) (int64, *models.User, error) {
	var err error
	
	var var3tp *dbutil540.TimeProp
	var3tp, err = dbutil540.NewTimeProp("DATETIME", true, "")
	if err != nil {
		return 0, nil, err
	}
	var3 := dbutil540.FormatColumnTime(delete.p.GetTimeStampzFormat(),
		delete.p.GetTimezone(),
		var3tp,
		user.Cret)
	sql := "DELETE FROM user WHERE age=? And cret=? "
	var sqlParams []interface{}
	// where 参数
	sqlParams = append(sqlParams, user.Age)
	sqlParams = append(sqlParams, var3)
	var var1 sql425.Result
	var1, err = delete.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, nil, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, nil, err
	}
	return var2, nil, nil
}

func (delete *Delete) DeleteXByAge(age int, URL string) (int64, models.User, error) {
	var err error
	sql := "DELETE FROM user WHERE age=? "
	var sqlParams []interface{}
	// where 参数
	sqlParams = append(sqlParams, age)
	var var1 sql425.Result
	var1, err = delete.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, models.User{}, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, models.User{}, err
	}
	return var2, models.User{}, nil
}

func (delete *Delete) DeleteName(user *models.User, name string, ages []int) (int64, error) {
	var err error
	sql := "DELETE FROM \"user\" WHERE id=? and age in (@in-1626428309)"
	var sqlParams []interface{}
	// where 参数
	sqlParams = append(sqlParams, user.ID)
	if len(ages) <= 0 {
		return 0, dbutil540.NewErrParamIsEmpty("ages")
	}
	sql = dbutil540.TakePlaceHolder(sql, "@in-1626428309", len(ages))
	for _, varP := range ages {
		sqlParams = append(sqlParams, varP)
	}
	var var1 sql425.Result
	var1, err = delete.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, err
	}
	return var2, nil
}

func (delete *Delete) DeleteXName(user *models.User, name string) (int64, error) {
	var err error
	sql := "DELETE FROM user WHERE id = ? and age>?"
	var sqlParams []interface{}
	// where 参数
	sqlParams = append(sqlParams, user.ID)
	sqlParams = append(sqlParams, user.Age)
	var var1 sql425.Result
	var1, err = delete.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, err
	}
	return var2, nil
}

func (delete *Delete) DeleteAll() (int64, models.User, error) {
	var err error
	sql := "DELETE FROM user"
	var sqlParams []interface{}
	// where 参数
	var var1 sql425.Result
	var1, err = delete.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, models.User{}, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, models.User{}, err
	}
	return var2, models.User{}, nil
}

func (delete *Delete) Delete1Name(id uint64) (int64, models.User, error) {
	var err error
	sql := "DELETE FROM user WHERE id=?"
	var sqlParams []interface{}
	// where 参数
	sqlParams = append(sqlParams, id)
	var var1 sql425.Result
	var1, err = delete.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, models.User{}, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, models.User{}, err
	}
	return var2, models.User{}, nil
}

func (delete *Delete) Delete2Name(user models.User, id uint64) (int64, error) {
	var err error
	sql := "DELETE FROM user WHERE id=?"
	var sqlParams []interface{}
	// where 参数
	sqlParams = append(sqlParams, id)
	var var1 sql425.Result
	var1, err = delete.p.Executor().Exec(sql, sqlParams...)
	if err != nil {
		return 0, err
	}
	var2, err := var1.RowsAffected()
	if err != nil {
		return var2, err
	}
	return var2, nil
}
